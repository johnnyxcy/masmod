from mas.model as mm
import mas.numpy as mnp


# 插件
# ----------------------------------------
from mas.model.devkit import ModelTemplate, DoseEvents

class BolusOneCpPhysioClosedForm(ModelTemplate):
    def ipred(self, cl, v):
        dose_events: DoseEvents = self.dose_events
        time = self.idv

        conc = 0
        for dosing_time_i, amt_i in self.dose_events:
            if time < dosing_time_i:
                break
            else:
                tad = time - dosing_time_i
                conc += amt_i / v * mnp.exp(- cl / v * tad)

        return conc


# class BolusOneCpPhysioODE(ModelTemplate):
#     def prepare(self):
#         cmt_central = mm.Compartment(label='central')
#         self.model.add_compartment(cmt_central)

#     def ode(self, cl, v):
#         central_cmt = self.model.compartments['central']
#         central_cmt.dAdt = -cl / v * central_cmt.A

#     def ipred(self, cl, v):
#         return self.compartments['central'].A / v


# 代码
# ----------------------------------------
class Run1(Model):
    """基准模型"""
    def __init__(self, data):
        super().__init__(data)

        self.tv_cl = mm.Theta(init=1, label='tv cl')
        self.tv_v = mm.Theta(init=2, label='tv v')

        self.tv_e0 = mm.Theta(init=2, label='tv e0')
        self.tv_emax = mm.Theta(init=2, label='tv emax')
        self.tv_ec50 = mm.Theta(init=2, label='tv ec50')

        self.eta_cl, self.eta_v = mm.Omega(
            init=[
                [1, 0],
                [0, 1]
            ],
            labels=('eta_cl', 'eta_v')
        )
        self.eta_e0 = mm.Omega(init=[1], labels=['eta_e0'])
        self.eta_emax = mm.Omega(init=[1], labels=['eta_emax'])
        self.eta_ec50 = mm.Omega(init=[1], labels=['eta_ec50'])

        self.eps_pk_add = mm.Sigma(init=1, labels='eps_pk_add')
        self.eps_pd_add = mm.Sigma(init=1, labels='eps_pd_add')

        cmt_effect = mm.Compartment(label="effect")
        self.add_compartments(cmt_effect)

    def pk(self):
        # pk
        cl = self.tv_cl + mnp.exp(self.eta_cl)
        v = self.tv_v + mnp.exp(self.eta_v)

        # pd
        e0 = self.tv_e0 + mnp.exp(self.eta_e0)
        emax = self.tv_emax + mnp.exp(self.eta_emax)
        ec50 = self.tv_ec50 + mnp.exp(self.eta_ec50)

        cc = BolusOneCpPhysioClosedForm(cl=cl, v=v)

        if mm.col['dviv'] == 1:
            self.ipred = cc
        else:
            self.ipred = e0 + emax * cc / (ec50 + cc)

    def error(self):
        if mm.col['dviv'] == 1:
            self.y = self.ipred + self.eps_pk_add
        else:
            self.y = self.ipred + self.eps_pd_add


if __name__ == "__main__":
    run_1 = Run1()

    run1_fit = run_1.fit(
        methods=(
            mm.Saem(nchain=10), 
            mm.Foce(niter=9999)
            )
        )

    mm.plot(run1_fit)
